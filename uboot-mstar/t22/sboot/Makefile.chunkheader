####################################################################
#######                 Makefile.chunkheader                 #######
####################################################################

#include mboot.mk
.PHONY : $(CHUNK_HEADER)


#####################################################################
#######         CREATE CHUNK HEADER INFORMATION START          ######
#####################################################################
##   Chunk Header parameter initialize START ##
UBOOT_ROM_START = 0
UBOOT_RAM_START = 0
UBOOT_RAM_END = 0
UBOOT_ROM_END = 0
UBOOT_RAM_ENTRY = 0
Reserved1 = 0
Reserved2 = 0x00000301
BINARY_ID = 0x0000B007
LOGO_ROM_OFFSET = 0
LOGO_SIZE = 0
SBOOT_ROM_OFFSET = 0
SBOOT_RAM_OFFSET = 0
PM_ROM_OFFSET = 0
PM_SIZE = 0x10000
PM_RAM_OFFSET = 0
SECURITY_INFO_LOADER_ROM_OFFSET = 4
SECURITY_INFO_LOADER_SIZE = 0
SECURITY_INFO_LOADER_RAM_OFFSET = 0
CUSTOMER_KEY_BANK_ROM_OFFSET = 0
CUSTOMER_KEY_BANK_SIZE = 0
CUSTOMER_KEY_BANK_RAM_OFFSET =0
## In PM code, "0xFFFFFFFF" is the default value of DDR_BACKUP_TABLE_ROM_OFFSET.
## If this flag is not 0xFFFFFFFF, it will triger the PM code to do something.
DDR_BACKUP_TABLE_ROM_OFFSET = 0xFFFFFFFF
POWER_SEQUENCE_TABLE_ROM_OFFSET = 0
SECURITY_INFO_AP_ROM_OFFSET = 0
SECURITY_INFO_AP_SIZE = 0
UBOOT_ENVIRONMENT_ROM_OFFSET = 2
UBOOT_ENVIRONMENT_SIZE = 0x10000
UBOOT_POOL_ROM_OFFSET = 0
UBOOT_POOL_SIZE = 0
NUTTX_CONFIG_OFFSET = 0
NUTTX_CONFIG_SIZE = 0
MBOOT_CONFIG_BINARY_OFFSET = 0
MBOOT_CONFIG_BINARY_SIZE = 0
RESCURE_ENVIRONMENT_ROM_OFFSET = 0
RESCURE_ENVIRONMENT_SIZE = 0x10000
RESCURE_STATUS_ROM_OFFSET = 0
RESCURE_STATUS_SIZE = 0
MAX_CONFIG_BINARY_SIZE = 0x1000
SECURITY_SIZE = 0
MTK_LOADER_ROM_START = 0
MTK_LOADER_ROM_END = 0
MTK_LOADER_SIZE = 0
MTK_LOADER_SIZE_ALIGN = 0
MTK_LOADER_FLAG_CHAR = 0
ifeq ($(CONFIG_NON_OS), y)
MBOOT_CL = MBOT-1106.0.10.$(shell (git rev-parse HEAD))
else
MBOOT_CL = $(shell (grep 'MBOOT_CL' -R ../u-boot-2011.06/include/version.h | sed 's/\#define MBOOT_CL  \"//g' | sed 's/\\n\"//g') | sed 's/ //g')
endif
##   Chunk Header parameter initialize END  ##



UBOOT_SIZE = $(shell ls -Gl $(UBOOT_BIN) | $(AWK) '{ print $$4 }')

ifeq ($(CONFIG_SECURITY_BOOT), y)
SECURITY_SIZE  = $(shell ls -Gl $(SECURITY_BIN) | $(AWK) '{ print $$4 }')
endif

ifeq ($(CONFIG_COMPRESSED_UBOOT), y)
ORI_UBOOT_SIZE = $(shell ls -Gl $(UBOOT_BIN).nocompress | $(AWK) '{ print $$4 }')
else
ORI_UBOOT_SIZE = $(UBOOT_SIZE)
endif

CHUNK_HEADER_SIZE = 1024
CUS_KEYBANK_LEN = 0x1000
ifeq ($(CONFIG_UBOOT_VERSION_INFO), y)
UBOOT_VERSION = 0x200
endif

ifeq ($(ARCH),aeon)
SPI_BASE=0x00000000
RAM_BASE=0x00000000
else ifeq ($(ARCH),mips)
ifeq ($(CONFIG_MSTAR_KAISERIN),y)
SPI_BASE=0x94000000
else ifeq ($(CONFIG_MSTAR_KRATOS),y)
ifeq ($(CONFIG_UBOOT_AS_2ND_LOADER), y)
SPI_BASE=0xBFC00000
else
SPI_BASE=0x94000000
endif
else
SPI_BASE=0xBFC00000
endif
RAM_BASE=0x20000000
else ifeq ($(ARCH),arm)
SPI_BASE=0x14000000
RAM_BASE=$(CONFIG_MIU0_BUSADDR)
else ifeq ($(ARCH),aarch64)
SPI_BASE=0x14000000
RAM_BASE=$(CONFIG_MIU0_BUSADDR)
endif

ifeq ($(CONFIG_MSTAR_RT_PM_IN_SPI),y)
PM_SIZE           		= 0x20000
endif

ifneq ($(CONFIG_PM_SIZE_KB_FORCED),0)
_SIZE_1K=0x400
PM_SIZE=$$(($(CONFIG_PM_SIZE_KB_FORCED)*$(_SIZE_1K)))
endif

ifeq ($(CONFIG_ENV_IN_MMC),y)
UBOOT_ENVIRONMENT_ROM_OFFSET = 256
endif

ifeq ($(CONFIG_BOOTING_FROM_EXT_SPI_WITH_PM51),y)
CUSTOMER_KEY_BANK_SIZE              = 0x10000
else ifeq ($(CONFIG_TEE_LOADER),y)
CUSTOMER_KEY_BANK_SIZE              = 0x2000
endif

MBOOT_ALIGNMENT_SIZE = 0x10000
ifeq ($(CONFIG_MBOOT_IN_SPI_FLASH),y)
MBOOT_ALIGNMENT_SIZE = 0x10000
else ifeq ($(CONFIG_MBOOT_IN_NAND_FLASH),y)
MBOOT_ALIGNMENT_SIZE = $(SBOOT_SIZE)
else ifeq ($(CONFIG_MBOOT_IN_MMC_FLASH),y)
MBOOT_ALIGNMENT_SIZE = 0x200
endif

ifeq ($(CONFIG_SECURITY_BOOT), y)
ifeq ($(CONFIG_SECURITY_STORE_IN_SPI_FLASH),y)
SECURITY_INFO_AP_ROM_OFFSET = 4
else ifeq ($(CONFIG_SECURITY_STORE_IN_NAND_FLASH),y)
SECURITY_INFO_AP_ROM_OFFSET = 4
else ifeq ($(CONFIG_SECURITY_STORE_IN_EMMC_FLASH),y)
SECURITY_INFO_AP_ROM_OFFSET = 1500
endif
else ifeq ($(CONFIG_MSTAR_NS_UBOOT), y)
ifeq ($(CONFIG_SECURITY_STORE_IN_SPI_FLASH),y)
SECURITY_INFO_AP_ROM_OFFSET = 4
else ifeq ($(CONFIG_SECURITY_STORE_IN_NAND_FLASH),y)
SECURITY_INFO_AP_ROM_OFFSET = 4
else ifeq ($(CONFIG_SECURITY_STORE_IN_EMMC_FLASH),y)
SECURITY_INFO_AP_ROM_OFFSET = 352
endif
endif

ifeq ($(CONFIG_R2_BRINGUP),y)
ifeq ($(CONFIG_NCONFIG_STORE_IN_EMMC_FLASH),y)
NUTTX_CONFIG_OFFSET = 608
NUTTX_CONFIG_SIZE = 128
else ifeq ($(CONFIG_NCONFIG_STORE_IN_NAND_FLASH),y)
NUTTX_CONFIG_OFFSET = 6
NUTTX_CONFIG_SIZE = 1
else ifeq ($(CONFIG_NCONFIG_STORE_IN_SPI_FLASH),y)
NUTTX_CONFIG_OFFSET = 6
NUTTX_CONFIG_SIZE = 1
endif
endif

ifeq ($(CONFIG_AMP_TRUSTZONE_ENABLE),y)
ifeq ($(CONFIG_NCONFIG_STORE_IN_EMMC_FLASH),y)
NUTTX_CONFIG_OFFSET = 608
NUTTX_CONFIG_SIZE = 128
else ifeq ($(CONFIG_NCONFIG_STORE_IN_NAND_FLASH),y)
NUTTX_CONFIG_OFFSET = 6
NUTTX_CONFIG_SIZE = 1
else ifeq ($(CONFIG_NCONFIG_STORE_IN_SPI_FLASH),y)
NUTTX_CONFIG_OFFSET = 6
NUTTX_CONFIG_SIZE = 1
endif
endif


ifeq ($(CONFIG_RESCUE_ENV),y)
ifeq ($(CONFIG_TEE),y)
    ifeq ($(CONFIG_ENV_IN_SERIAL),y)
    RESCURE_ENVIRONMENT_ROM_OFFSET = 8
    RESCURE_STATUS_ROM_OFFSET = 9
    else ifeq ($(CONFIG_ENV_IN_NAND),y)
    RESCURE_ENVIRONMENT_ROM_OFFSET = 8
    RESCURE_STATUS_ROM_OFFSET = 9
    else ifeq ($(CONFIG_ENV_IN_MMC),y)
    RESCURE_ENVIRONMENT_ROM_OFFSET = 1120
    RESCURE_STATUS_ROM_OFFSET = 1121
    endif
else ifeq ($(CONFIG_SECURITY_BOOT),y)
    ifeq ($(CONFIG_ENV_IN_SERIAL),y)
    RESCURE_ENVIRONMENT_ROM_OFFSET = 6
    RESCURE_STATUS_ROM_OFFSET = 7
    else ifeq ($(CONFIG_ENV_IN_NAND),y)
    RESCURE_ENVIRONMENT_ROM_OFFSET = 6
    RESCURE_STATUS_ROM_OFFSET = 7
    else ifeq ($(CONFIG_ENV_IN_MMC),y)
    RESCURE_ENVIRONMENT_ROM_OFFSET = 864
    RESCURE_STATUS_ROM_OFFSET = 865
    endif
else ifeq ($(CONFIG_MSTAR_NS_UBOOT),y)
    ifeq ($(CONFIG_ENV_IN_SERIAL),y)
    RESCURE_ENVIRONMENT_ROM_OFFSET = 6
    RESCURE_STATUS_ROM_OFFSET = 7
    else ifeq ($(CONFIG_ENV_IN_NAND),y)
    RESCURE_ENVIRONMENT_ROM_OFFSET = 6
    RESCURE_STATUS_ROM_OFFSET = 7
    else ifeq ($(CONFIG_ENV_IN_MMC),y)
    RESCURE_ENVIRONMENT_ROM_OFFSET = 864
    RESCURE_STATUS_ROM_OFFSET = 865
    endif
else
	ifeq ($(CONFIG_ENV_IN_SERIAL),y)
    RESCURE_ENVIRONMENT_ROM_OFFSET = 4
    RESCURE_STATUS_ROM_OFFSET = 5
	else ifeq ($(CONFIG_ENV_IN_NAND),y)
    RESCURE_ENVIRONMENT_ROM_OFFSET = 4
    RESCURE_STATUS_ROM_OFFSET = 5
	else ifeq ($(CONFIG_ENV_IN_MMC),y)
    RESCURE_ENVIRONMENT_ROM_OFFSET = 608
    RESCURE_STATUS_ROM_OFFSET = 609
	endif
endif
endif

ifeq ($(CONFIG_MTK_LOADER),y)
MTK_LOADER_SIZE = $(shell ls -Gl $(MTK_LOADER_BIN) | $(AWK) '{ print $$4 }')
MTK_LOADER_SIZE_ALIGN=$(call ALIGN,$(MTK_LOADER_SIZE),$(MBOOT_ALIGNMENT_SIZE))
MTK_LOADER_FLAG_CHAR=0x4C4B544D
endif

ifeq ($(CHIP_FOLDER), janus)
_UBOOT_RAM_START            = $(shell $(AWK) '$$2 == "_start" { print $$1 }' $(UBOOT_MAP))
UBOOT_RAM_ENTRY             = $(shell $(AWK) '$$2 == "_start" { print $$1 }' $(UBOOT_MAP))
else  ifeq ($(CHIP_FOLDER), maria10)
_UBOOT_RAM_START            = $(shell $(AWK) '$$2 == "_start" { print $$1 }' $(UBOOT_MAP))
UBOOT_RAM_ENTRY             = $(shell $(AWK) '$$2 == "_start" { print $$1 }' $(UBOOT_MAP))
else ifeq ($(CHIP_FOLDER), macaw12)
_UBOOT_RAM_START            = $(shell $(AWK) '$$2 == "_start" { print $$1 }' $(UBOOT_MAP))
UBOOT_RAM_ENTRY             = $(shell $(AWK) '$$2 == "_start" { print $$1 }' $(UBOOT_MAP))
else ifeq ($(CONFIG_MCU_ARM),y)
UBOOT_RAM_ENTRY             = $(shell $(AWK) '$$2 == "_start" { print $$1 }' $(UBOOT_MAP))
_UBOOT_RAM_START            = $$(($(UBOOT_RAM_ENTRY)-$(RAM_BASE)))
else
_UBOOT_RAM_START            = $(shell $(AWK) '$$2 == "other_vector" { print $$1 }' $(UBOOT_MAP))
ifeq ($(CONFIG_UBOOT_AS_2ND_LOADER), y)
UBOOT_RAM_ENTRY             = $(shell $(AWK) '$$2 == "_start" { print $$1 }' $(UBOOT_MAP))
else
UBOOT_RAM_ENTRY             = $(shell $(AWK) '$$2 == "reset_vector" { print $$1 }' $(UBOOT_MAP))
endif


endif

ifeq ($(CONFIG_UBOOT_AS_2ND_LOADER), y)
UBOOT_RAM_START=$$(($(_UBOOT_RAM_START)+$(RAM_BASE)))
ifeq ($(CONFIG_UBOOT_VERSION_INFO), y)
UBOOT_RAM_END=$$(($(_UBOOT_RAM_START)+$(ORI_UBOOT_SIZE)+$(RAM_BASE)+$(UBOOT_VERSION)))
else
UBOOT_RAM_END=$$(($(_UBOOT_RAM_START)+$(ORI_UBOOT_SIZE)+$(RAM_BASE)))
endif
else
UBOOT_RAM_START=$$(($(_UBOOT_RAM_START)))
UBOOT_RAM_END=$$(($(_UBOOT_RAM_START)+$(ORI_UBOOT_SIZE)))
endif

ifeq ($(CONFIG_BOOTING_FROM_OTP_WITH_PM51),y)
    SECURITY_INFO_LOADER_SIZE = 816
    PM_ROM_OFFSET=$(SPI_BASE)
    PM_RAM_OFFSET=$(CONFIG_PM_DRAM_ADDRESS)
    SBOOT_ROM_OFFSET=$$(($(PM_ROM_OFFSET)+$(PM_SIZE)))
    SBOOT_RAM_OFFSET=$(shell $(AWK) '$$2 == "_ld_boot_start" { print $$1 }' $(SBOOT_MAP))
    CUSTOMER_KEY_BANK_ROM_OFFSET=$$(($(SBOOT_ROM_OFFSET)+$(SBOOT_SIZE)))
    CUSTOMER_KEY_BANK_RAM_OFFSET=$(CONFIG_CUSTOMER_KEY_BANK_DRAM_ADDRESS)
    ## Remember Chunk Header
    UBOOT_ROM_START=$$(($(CUSTOMER_KEY_BANK_ROM_OFFSET)+$(CUSTOMER_KEY_BANK_SIZE)+$(CHUNK_HEADER_SIZE)))
    UBOOT_ROM_END=$$(($(UBOOT_ROM_START)+$(UBOOT_SIZE)))
    SECURITY_INFO_LOADER_ROM_OFFSET=$(UBOOT_ROM_END)
    SECURITY_INFO_LOADER_RAM_OFFSET=$(CONFIG_SECURITY_INFO_DRAM_ADDRESS)
else ifeq (y, $(findstring y, $(CONFIG_MSTAR_ROM_BOOT_WITH_NAND_FLASH)\
                              $(CONFIG_MSTAR_ROM_BOOT_WITH_EMMC_FLASH)\
                              $(CONFIG_MSTAR_ROM_BOOT_WITH_SPI_NOR_FLASH)))
    ifneq ($(CONFIG_TEE_LOADER), y)
    ifeq ($(CONFIG_DOUBLE_MBOOT), y)
    UBOOT_ROM_START=$$(($(CHUNK_HEADER_SIZE)+$(HASH3_SIZE)))
    else
      ifeq ($(CONFIG_BOOTRAM_STORE_IN_MBOOT), y)
        UBOOT_ROM_START=$$(($(CHUNK_HEADER_SIZE)+$(HASH2_SIZE)))
      else
			ifeq ($(CONFIG_MTK_LOADER),y)
			MTK_LOADER_ROM_START=$$(($(CHUNK_HEADER_SIZE)+$(CUSTOMER_KEY_BANK_SIZE)))
			MTK_LOADER_ROM_END=$$(($(MTK_LOADER_ROM_START)+$(MTK_LOADER_SIZE_ALIGN)))
			UBOOT_ROM_START=$$(($(MTK_LOADER_ROM_END)))
			else
        UBOOT_ROM_START=$(CHUNK_HEADER_SIZE)
      endif
    endif
		endif
    ifeq ($(CONFIG_UBOOT_VERSION_INFO), y)
    UBOOT_ROM_END=$$(($(UBOOT_ROM_START)+$(UBOOT_SIZE)+$(UBOOT_VERSION)))
    else
    UBOOT_ROM_END=$$(($(UBOOT_ROM_START)+$(UBOOT_SIZE)))
    endif
    ifeq ($(CONFIG_SECURITY_BOOT), y)
    SECURITY_INFO_LOADER_SIZE = 272
    SECURITY_INFO_LOADER_ROM_OFFSET=$(UBOOT_ROM_END)
    _CUSTOMER_KEY_BANK_ROM_OFFSET=$$(($(SECURITY_INFO_LOADER_ROM_OFFSET)+$(SECURITY_INFO_LOADER_SIZE)))
    CUSTOMER_KEY_BANK_ROM_OFFSET=$(call ALIGN,$(_CUSTOMER_KEY_BANK_ROM_OFFSET),$(MBOOT_ALIGNMENT_SIZE))
    else ifeq ($(CONFIG_MSTAR_NS_UBOOT), y)
    SECURITY_INFO_LOADER_SIZE = 272
    SECURITY_INFO_LOADER_ROM_OFFSET=$(UBOOT_ROM_END)
    _CUSTOMER_KEY_BANK_ROM_OFFSET=$$(($(SECURITY_INFO_LOADER_ROM_OFFSET)+$(SECURITY_INFO_LOADER_SIZE)))
    CUSTOMER_KEY_BANK_ROM_OFFSET=$(call ALIGN,$(_CUSTOMER_KEY_BANK_ROM_OFFSET),$(MBOOT_ALIGNMENT_SIZE))
    endif
    else
        ifeq (y, $(findstring y, $(CONFIG_SECURITY_BOOT) \
                                 $(CONFIG_MSTAR_NS_UBOOT)))
            CUSTOMER_KEY_BANK_ROM_OFFSET=$(CHUNK_HEADER_SIZE)
            CUSTOMER_KEY_BANK_RAM_OFFSET=$(CONFIG_CUSTOMER_KEYBANK_LOADADDR)
        endif
        ifeq ($(CONFIG_BOOTRAM_STORE_IN_MBOOT), y)
            UBOOT_ROM_START=$$(($(CHUNK_HEADER_SIZE)+$(CUSTOMER_KEY_BANK_SIZE)+$(HASH2_SIZE)))
        else
            UBOOT_ROM_START=$$(($(CHUNK_HEADER_SIZE)+$(CUSTOMER_KEY_BANK_SIZE)))
        endif
        ifeq ($(CONFIG_UBOOT_VERSION_INFO), y)
            UBOOT_ROM_END=$$(($(UBOOT_ROM_START)+$(UBOOT_SIZE)+$(UBOOT_VERSION)))
        else
            UBOOT_ROM_END=$$(($(UBOOT_ROM_START)+$(UBOOT_SIZE)))
        endif
    endif
else
    ifeq ($(CONFIG_BOOTING_FROM_EXT_SPI_WITH_CPU), y)
    ifeq ($(CONFIG_DISABLE_PM_PARTITION),y)
    PM_SIZE =0x0
    endif
    endif
    SBOOT_ROM_OFFSET=$$(($(PM_ROM_OFFSET)+$(PM_SIZE)))
    CUSTOMER_KEY_BANK_ROM_OFFSET=$$(($(PM_ROM_OFFSET)+$(SBOOT_SIZE)+$(PM_SIZE)))
    UBOOT_ROM_START=$$(($(PM_SIZE)+$(SBOOT_SIZE)+$(CUSTOMER_KEY_BANK_SIZE)+$(CHUNK_HEADER_SIZE)+$(SPI_BASE)))
    UBOOT_ROM_END=$$(($(UBOOT_ROM_START)+$(UBOOT_SIZE)))
    ifeq ($(CONFIG_LOGO_STORE_IN_SPI_FLASH),y)
    UBOOT_POOL_ROM_OFFSET = $$(((($(UBOOT_ROM_END)+$(SECURITY_INFO_LOADER_SIZE)+0x10000)&(~0xFFFF))-$(SPI_BASE)))
    endif
endif


ifeq ($(CONFIG_LOGO_STORE_IN_MBOOT),y)
LOGO_SIZE=$(shell ls -Gl $(LOGO_SRC) | $(AWK) '{ print $$4 }')
_LOGO_ROM_OFFSET=$$(($(UBOOT_ROM_END)+$(SECURITY_INFO_LOADER_SIZE)+$(SECURITY_SIZE)))
ifeq ($(CONFIG_MBOOT_IN_SPI_FLASH),y)
LOGO_ROM_OFFSET=$$(($(call ALIGN,$(_LOGO_ROM_OFFSET),$(MBOOT_ALIGNMENT_SIZE)) - $(SPI_BASE)))
else
LOGO_ROM_OFFSET=$$(($(call ALIGN,$(_LOGO_ROM_OFFSET),$(MBOOT_ALIGNMENT_SIZE))))
endif
endif


ifeq ($(CONFIG_BACKUP_SENSITIVE_TABLE), y)
DDR_BACKUP_TABLE_ROM_OFFSET=$(CONFIG_SPI_OFFSET_OF_BACKUP_TABLE)
endif




############################################################################################
###############                  Generate CHUNK HEADER Image                 ###############
############################################################################################
$(CHUNK_HEADER):
	$(Q)echo "  GEN     $@"
	$(Q)printf "== CHUNK HEADER INFO ==\n"
	$(Q)printf "UBOOT_ROM_START=0x%x\n" $(UBOOT_ROM_START)
	$(Q)printf "UBOOT_RAM_START=0x%x\n" $(UBOOT_RAM_START)
	$(Q)printf "UBOOT_RAM_END=0x%x\n" $(UBOOT_RAM_END)
	$(Q)printf "UBOOT_ROM_END=0x%x\n" $(UBOOT_ROM_END)
	$(Q)printf "UBOOT_RAM_ENTRY=0x%x\n" $(UBOOT_RAM_ENTRY)
	$(Q)printf "Reserved1=0x%x\n" $(Reserved1)
	$(Q)printf "Reserved2=0x%x\n" $(Reserved2)
	$(Q)printf "BINARY_ID=0x%x\n" $(BINARY_ID)
	$(Q)printf "LOGO_ROM_OFFSET=0x%x\n" $(LOGO_ROM_OFFSET)
	$(Q)printf "LOGO_SIZE=0x%x\n" $(LOGO_SIZE)
	$(Q)printf "SBOOT_ROM_OFFSET=0x%x\n" $(SBOOT_ROM_OFFSET)
	$(Q)printf "SBOOT_SIZE=0x%x\n" $(SBOOT_SIZE)
	$(Q)printf "SBOOT_RAM_OFFSET=0x%x\n" $(SBOOT_RAM_OFFSET)
	$(Q)printf "PM_ROM_OFFSET=0x%x\n" $(PM_ROM_OFFSET)
	$(Q)printf "PM_SIZE=0x%x\n" $(PM_SIZE)
	$(Q)printf "PM_RAM_OFFSET=0x%x\n" $(PM_RAM_OFFSET)
	$(Q)printf "SECURITY_INFO_LOADER_ROM_OFFSET=0x%x\n" $(SECURITY_INFO_LOADER_ROM_OFFSET)
	$(Q)printf "SECURITY_INFO_LOADER_SIZE=0x%x\n" $(SECURITY_INFO_LOADER_SIZE)
	$(Q)printf "SECURITY_INFO_LOADER_RAM_OFFSET=0x%x\n" $(SECURITY_INFO_LOADER_RAM_OFFSET)
	$(Q)printf "CUSTOMER_KEY_BANK_ROM_OFFSET=0x%x\n" $(CUSTOMER_KEY_BANK_ROM_OFFSET)
	$(Q)printf "CUSTOMER_KEY_BANK_SIZE=0x%x\n" $(CUSTOMER_KEY_BANK_SIZE)
	$(Q)printf "CUSTOMER_KEY_BANK_RAM_OFFSET=0x%x\n" $(CUSTOMER_KEY_BANK_RAM_OFFSET)
	$(Q)printf "DDR_BACKUP_TABLE_ROM_OFFSET=0x%x\n" $(DDR_BACKUP_TABLE_ROM_OFFSET)
	$(Q)printf "POWER_SEQUENCE_TABLE_ROM_OFFSET=0x%x\n" $(POWER_SEQUENCE_TABLE_ROM_OFFSET)
	$(Q)printf "SECURITY_INFO_AP_ROM_OFFSET=0x%x\n" $(SECURITY_INFO_AP_ROM_OFFSET)
	$(Q)printf "SECURITY_INFO_AP_SIZE=0x%x\n" $(SECURITY_INFO_AP_SIZE)
	$(Q)printf "UBOOT_ENVIRONMENT_ROM_OFFSET=0x%x\n" $(UBOOT_ENVIRONMENT_ROM_OFFSET)
	$(Q)printf "UBOOT_ENVIRONMENT_SIZE=0x%x\n" $(UBOOT_ENVIRONMENT_SIZE)
	$(Q)printf "UBOOT_POOL_ROM_OFFSET=0x%x\n" $(UBOOT_POOL_ROM_OFFSET)
	$(Q)printf "UBOOT_POOL_SIZE=0x%x\n" $(UBOOT_POOL_SIZE)
	$(Q)printf "NUTTX_CONFIG_OFFSET=0x%x\n" $(NUTTX_CONFIG_OFFSET)
	$(Q)printf "NUTTX_CONFIG_SIZE=0x%x\n" $(NUTTX_CONFIG_SIZE)
	$(Q)printf "RESCURE_ENVIRONMENT_ROM_OFFSET=0x%x\n" $(RESCURE_ENVIRONMENT_ROM_OFFSET)
	$(Q)printf "RESCURE_ENVIRONMENT_SIZE=0x%x\n" $(RESCURE_ENVIRONMENT_SIZE)
	$(Q)printf "RESCURE_STATUS_ROM_OFFSET=0x%x\n" $(RESCURE_STATUS_ROM_OFFSET)
	$(Q)printf "RESCURE_STATUS_SIZE=0x%x\n" $(RESCURE_STATUS_SIZE)
	$(Q)printf "MTK_LOADER_SIZE=0x%x\n" $(MTK_LOADER_SIZE)
	$(Q)printf "MTK_LOADER_SIZE_ALIGN=0x%x\n" $(MTK_LOADER_SIZE_ALIGN)
	$(Q)printf "MTK_LOADER_ROM_START=0x%x\n" $(MTK_LOADER_ROM_START)
	$(Q)printf "MTK_LOADER_ROM_END=0x%x\n" $(MTK_LOADER_ROM_END)
	$(Q)printf "MTK_LOADER_FLAG_CHAR=%s\n" $(MTK_LOADER_FLAG_CHAR)
	$(Q)printf "MBOOT_CL=%s\n" $(MBOOT_CL)

	$(Q)$(TOOLDIR)/create_chunk_header.exe $(CHUNK_HEADER) $(CHUNK_HEADER_SIZE)\
		$(UBOOT_ROM_START) $(UBOOT_RAM_START) $(UBOOT_RAM_END) $(UBOOT_ROM_END) \
		$(UBOOT_RAM_ENTRY) $(Reserved1) $(Reserved2) $(BINARY_ID) \
		$(LOGO_ROM_OFFSET) $(LOGO_SIZE) $(SBOOT_ROM_OFFSET) $(SBOOT_SIZE) \
		$(SBOOT_RAM_OFFSET) $(PM_ROM_OFFSET) $(PM_SIZE)	$(PM_RAM_OFFSET) \
		$(SECURITY_INFO_LOADER_ROM_OFFSET) $(SECURITY_INFO_LOADER_SIZE) $(SECURITY_INFO_LOADER_RAM_OFFSET) $(CUSTOMER_KEY_BANK_ROM_OFFSET)\
		$(CUSTOMER_KEY_BANK_SIZE) $(CUSTOMER_KEY_BANK_RAM_OFFSET) $(SECURITY_INFO_AP_ROM_OFFSET) $(SECURITY_INFO_AP_SIZE)  \
		$(UBOOT_ENVIRONMENT_ROM_OFFSET) $(UBOOT_ENVIRONMENT_SIZE) $(DDR_BACKUP_TABLE_ROM_OFFSET) $(POWER_SEQUENCE_TABLE_ROM_OFFSET) \
		$(UBOOT_POOL_ROM_OFFSET) $(UBOOT_POOL_SIZE) $(NUTTX_CONFIG_OFFSET) $(NUTTX_CONFIG_SIZE) \
		$(RESCURE_ENVIRONMENT_ROM_OFFSET) $(RESCURE_ENVIRONMENT_SIZE) $(RESCURE_STATUS_ROM_OFFSET) $(RESCURE_STATUS_SIZE) \
		$(MTK_LOADER_ROM_START) $(MTK_LOADER_ROM_END) $(MTK_LOADER_FLAG_CHAR)\
		$(MBOOT_CL)

	# Always be the last one
	$(Q)python $(TOOLDIR)/append_board_info.py .config $@

ifeq ($(CONFIG_MSTAR_AUTHEN_ENABLE), y)
	$(Q)cp $(CHUNK_HEADER) $(CHUNK_HEADER).tmp
	$(Q)dd of=$(CHUNK_HEADER) if=$(CHUNK_HEADER).tmp bs=1 count=748
	$(Q)echo 'CHUN' | head -c 4 >> $(CHUNK_HEADER)
endif
#######           CREATE  CHUNK HEADER INFORMATION END              ######
