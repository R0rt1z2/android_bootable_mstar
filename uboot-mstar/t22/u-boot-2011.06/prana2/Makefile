#########################################################################
#
# Makefile used for building application.
#
# The default target (all) builds application in three formats :
#   *.rec : Image in S-record format.
#   *.bin : Image in binary format.
#   *.elf : Image in ELF format.
#   *.map : Linker generated map file.
#   *.dis : Disassembly of image.
#   *.sym : Symbols.
#
# Other targets are :
#   clean : Deletes all files generated by makefile.
#
#########################################################################

# **********************************************
# Build Options
# **********************************************
# Version: Debug or Retail
VERSION  = Retail

# Makefile for DVB system
TV_SYSTEM = DVB

# CHIP?= S7, S8, U3, S4LE, S7L, U4, MARIA10, J2, T11, A1, A6, K1, A5, AGATE, EAGLE, MACAW12, EMERALD, EDISON, EINSTEIN, EDEN, EIFFEL, EULER,
# NIKE, NUGGET, NIKON, KENYA, KELTIC, KERES, KRITI, NASA, EINSTEIN3, NADAL, MADISON, MONACO, MIAMI, NAPOLI, CLIPPERS, MUJI, MANHATTAN,MASERATI
# MUNICH, MUSTANG, MILAN, KRIS, K1P, MONET, MAYA, KANO, KRATOS, K6, WHISKY, CURRY, MELODY, MYSTIC, MAXIM, K6LITE, K7U, K5TN, MATISSE, MARLON, MOONEY, MCLAREN, C2P, K5AP, K1C
# MARCUS, MARVEL, M7221, M7622, M7322, M5321, M7632, M7332
# M3822(MARLON2), C2S
CHIP?=M7322

# ARCH?= AEON or MIPS or AEONR2 or ARMv7 or ARMv8
ARCH?=ARMv7

# PLATFORM?= CHAKRA, MBoot
PLATFORM?=MBoot

ifeq ($(ARCH),AEONR2)
    AEON_TYPE?=aeonR2
else
    AEON_TYPE?=aeon1
endif

LOW_CHIP = `echo ${CHIP} | tr [A-Z] [a-z]`

MALLOC?=DL

ifeq ($(MALLOC),BSD)
MALLOC_FILE = malloc-bsd.c
else
MALLOC_FILE = dlmalloc.c
endif

ifeq ($(ARCH),AEON)
#// AEON Series CPU
ifeq ($(CHIP),NIKON)
CPU=risc32/nikon
else ifeq ($(CHIP),MILAN)
CPU=risc32/milan
else ifeq ($(CHIP),MARLON)
CPU=risc32/marlon
else ifeq ($(CHIP),M3822)
CPU=risc32/M3822
else
CPU?=risc32
endif

else ifeq ($(ARCH),AEONR2)
#// AEON R2 Series CPU
CPU?=risc32

else ifeq ($(ARCH),MIPS)
#// MIPS Series CPU
ifeq ($(CHIP),S4LE)
CPU?=mips4ke
else ifeq ($(CHIP),A5)
CPU?=mips74k
else ifeq ($(CHIP),A5P)
CPU?=mips74k
else ifeq ($(CHIP),K2)
CPU?=mips74k
else ifeq ($(CHIP),KERES)
CPU?=mips74k
else ifeq ($(CHIP),KRIS)
CPU?=mips74k
else ifeq ($(CHIP),K1P)
CPU?=mips74k
else ifeq ($(CHIP),KIWI)
CPU?=mips74k
else ifeq ($(CHIP),K5TN)
CPU?=mips74k
else ifeq ($(CHIP),K1C)
CPU?=mips74k
else ifeq ($(CHIP),J2)
CPU=mips1004k
else
CPU=mips34k
endif

else ifeq ($(ARCH),ARMv7)
#// ARMv7 Series CPU
ifeq ($(CHIP), $(filter $(CHIP), NIKE NADAL MADISON CLIPPERS CELTICS MUJI MONET MANHATTAN KANO K6 MESSI MASERATI MYSTIC MAXIM K6LITE K7U MOONEY MCLAREN C2P MARCUS MARVEL M7221 M7622 M7322 C2S M7632 M7332))
CPU=arm_ca7
else ifeq ($(CHIP), $(filter $(CHIP), MONACO))
CPU=arm_ca12
else
CPU=armca9
endif

else ifeq ($(ARCH),ARMv8)
#// ARMv8 Series CPU
ifeq ($(CHIP), $(filter $(CHIP), MUJI MONET MANHATTAN MESSI CURRY MASERATI MYSTIC MAXIM MOONEY MCLAREN C2P MARCUS MARVEL M7221 M7622 M7322 C2S M7632 M7332))
CPU=arm_ca53
else
CPU=arm_ca53
endif

endif

ifeq ($(CHIP),MARIA10)
CPU=risc32/maria10
else ifeq ($(CHIP),MACAW12)
CPU=risc32/macaw12
else ifeq ($(CHIP),EDEN)
CPU=risc32/eden
else ifeq ($(CHIP),NASA)
CPU=risc32/nasa
else ifeq ($(CHIP),EULER)
CPU=risc32/euler
else ifeq ($(CHIP),MAYA)
CPU=risc32/maya
else ifeq ($(CHIP),WHISKY)
CPU=risc32/whisky
else ifeq ($(CHIP),MELODY)
CPU=risc32/melody
endif

# OS= NOS or ECOS
OS=NOS

# **********************************************
# Tool Chain
# **********************************************
ifeq ($(ARCH),AEON)
CROSSCOMPILE = aeon-
ARCH_FLAGS = -march=$(AEON_TYPE) -mhard-div -mhard-mul -mredzone-size=4 -EL
CHECK_TOOL_VER = yes
CFG_TOOLCHAIN_VER = 4.1.2

else ifeq ($(ARCH),AEONR2)
CROSSCOMPILE = aeon-
ARCH_FLAGS = -march=$(AEON_TYPE) -mhard-div -mhard-mul -mredzone-size=4 -EL
CHECK_TOOL_VER = yes
ifeq ($(CHIP),MARIA10)
CFG_TOOLCHAIN_VER = 4.1.2
else ifeq ($(CHIP),MACAW12)
CFG_TOOLCHAIN_VER = 4.1.2
else ifeq ($(CHIP),EDEN)
CFG_TOOLCHAIN_VER = 4.1.2
else ifeq ($(CHIP),NASA)
CFG_TOOLCHAIN_VER = 4.1.2
else ifeq ($(CHIP),EULER)
CFG_TOOLCHAIN_VER = 4.1.2
else ifeq ($(CHIP),MAYA)
CFG_TOOLCHAIN_VER = 4.1.2
else ifeq ($(CHIP),WHISKY)
CFG_TOOLCHAIN_VER = 4.1.2
else ifeq ($(CHIP),MELODY)
CFG_TOOLCHAIN_VER = 4.1.2
else
CFG_TOOLCHAIN_VER = 4.4.3
endif

else ifeq ($(ARCH),MIPS)
ifeq ($(CHIP), K1)
CROSSCOMPILE = mips-linux-gnu-
CC_OPTS += -D'CROSSCOMPILE_MIPS_LINUX_GUN=1'
else ifeq ($(CHIP), K2)
CROSSCOMPILE = mips-linux-gnu-
CC_OPTS += -D'CROSSCOMPILE_MIPS_LINUX_GUN=1'
else ifeq ($(CHIP), KELTIC)
CROSSCOMPILE = mips-linux-gnu-
CC_OPTS += -D'CROSSCOMPILE_MIPS_LINUX_GUN=1'
else ifeq ($(CHIP), KAPPA)
CROSSCOMPILE = mips-linux-gnu-
CC_OPTS += -D'CROSSCOMPILE_MIPS_LINUX_GUN=1'
else ifeq ($(CHIP), KRITI)
CROSSCOMPILE = mips-linux-gnu-
CC_OPTS += -D'CROSSCOMPILE_MIPS_LINUX_GUN=1'
else ifeq ($(CHIP), KRATOS)
CROSSCOMPILE = mips-linux-gnu-
CC_OPTS += -D'CROSSCOMPILE_MIPS_LINUX_GUN=1'
else ifeq ($(CHIP), KIWI)
CROSSCOMPILE = mips-linux-gnu-
CC_OPTS += -D'CROSSCOMPILE_MIPS_LINUX_GUN=1'
else ifeq ($(CHIP), KERES)
CROSSCOMPILE = mips-linux-gnu-
CC_OPTS += -D'CROSSCOMPILE_MIPS_LINUX_GUN=1'
else ifeq ($(CHIP), KRIS)
CROSSCOMPILE = mips-linux-gnu-
CC_OPTS += -D'CROSSCOMPILE_MIPS_LINUX_GUN=1'
else ifeq ($(CHIP), K1P)
CROSSCOMPILE = mips-linux-gnu-
CC_OPTS += -D'CROSSCOMPILE_MIPS_LINUX_GUN=1'
else ifeq ($(CHIP), K5TN)
CROSSCOMPILE = mips-linux-gnu-
CC_OPTS += -D'CROSSCOMPILE_MIPS_LINUX_GUN=1'
else ifeq ($(CHIP), K5AP)
CC_OPTS += -D'CROSSCOMPILE_MIPS_LINUX_GUN=1'
CROSSCOMPILE = mips-linux-gnu-
else ifeq ($(CHIP), K1C)
CC_OPTS += -D'CROSSCOMPILE_MIPS_LINUX_GUN=1'
CROSSCOMPILE = mips-linux-gnu-
else

ifeq ($(PLATFORM),MBoot)
CROSSCOMPILE = mips-linux-gnu-
CC_OPTS += -D'CROSSCOMPILE_MIPS_LINUX_GUN=1'
else
CROSSCOMPILE = mips-sde-elf-
CC_OPTS += -D'CROSSCOMPILE_MIPS_LINUX_GUN=0'
endif

endif

else ifeq ($(ARCH),ARMv7)
CROSSCOMPILE = $(TOOLSCHAINPATH)/arm-none-eabi-
CHECK_TOOL_VER = yes
CFG_TOOLCHAIN_VER = 4.5.2

else ifeq ($(ARCH),ARMv8)
CROSSCOMPILE = aarch64-none-elf-
CHECK_TOOL_VER = yes
CFG_TOOLCHAIN_VER = 4.9.1
endif

ifeq ($(CHECK_TOOL_VER),yes)
CC	    = $(CROSSCOMPILE)gcc-$(CFG_TOOLCHAIN_VER)
else
CC	    = $(CROSSCOMPILE)gcc
endif
CPP	    = $(CROSSCOMPILE)cpp
LD	    = $(CROSSCOMPILE)ld
OBJCOPY = $(CROSSCOMPILE)objcopy
OBJDUMP = $(CROSSCOMPILE)objdump
SIZE    = $(CROSSCOMPILE)size
AR	    = $(CROSSCOMPILE)ar
NM	    = $(CROSSCOMPILE)nm
FLINT   = ./flint

# **********************************************
# Directories
# **********************************************
ROOT    = .
OBJDIR  = Obj
OBJPATH = $(OUT)/obj/MBOOT_OBJ/$(OBJDIR)_$(CHIP)
PRANA_LIBPATH = $(OUT)/obj/MBOOT_OBJ/lib/mstar

#-----------------------------------------------
#setting driver folder
#ifeq ( $(CHIP), S4LE )
#   CLOCKDIR ?= driver/clock/s4le
#else
#   CLOCKDIR ?= driver/clock/s7
#endif
#-----------------------------------------------

ifeq ($(ARCH),AEONR2)
PRANA_SRC = \
        $(ROOT)/cpu/$(CPU)/reset.S                      \
        $(ROOT)/cpu/$(CPU)/vectors.S                    \
        $(ROOT)/cpu/$(CPU)/stack.S                      \
        $(ROOT)/cpu/$(CPU)/cache.S                      \
        $(ROOT)/cpu/$(CPU)/context.S                    \
        $(ROOT)/cpu/$(CPU)/interrupt.c                  \
        $(ROOT)/cpu/$(CPU)/exception.c
endif
ifeq ($(ARCH),AEON)
PRANA_SRC = \
        $(ROOT)/cpu/$(CPU)/reset.S                      \
        $(ROOT)/cpu/$(CPU)/vectors.S                    \
        $(ROOT)/cpu/$(CPU)/stack.S                      \
        $(ROOT)/cpu/$(CPU)/cache.S                      \
        $(ROOT)/cpu/$(CPU)/context.S                    \
        $(ROOT)/cpu/$(CPU)/interrupt.c                  \
        $(ROOT)/cpu/$(CPU)/exception.c
endif
ifeq ($(ARCH),MIPS)
	ifeq ($(OS),NOS)
	PRANA_SRC = \
        	$(ROOT)/cpu/$(CPU)/vectors.S                    \
        	$(ROOT)/cpu/$(CPU)/mips.S                       \
        	$(ROOT)/cpu/$(CPU)/cache.c                      \
        	$(ROOT)/cpu/$(CPU)/interrupt.c                  \
        	$(ROOT)/cpu/$(CPU)/exception.c
	else
	PRANA_SRC = \
        	$(ROOT)/cpu/$(CPU)/cache.c                      \
        	$(ROOT)/cpu/$(CPU)/interrupt.c
	endif
endif
ifeq ($(ARCH),ARMv7)
PRANA_SRC = \
        $(ROOT)/cpu/$(CPU)/head.S                       \
        $(ROOT)/cpu/$(CPU)/vectors.S                    \
        $(ROOT)/cpu/$(CPU)/interrupt.c                  \
        $(ROOT)/cpu/$(CPU)/exception.c                  \
        $(ROOT)/cpu/$(CPU)/cache-v7.S                   \
        $(ROOT)/cpu/$(CPU)/mmu.c
endif

ifeq ($(ARCH),ARMv8)
PRANA_SRC = \
        $(ROOT)/cpu/$(CPU)/head.S                       \
        $(ROOT)/cpu/$(CPU)/interrupt.c                  \
        $(ROOT)/cpu/$(CPU)/exception.c                  \
        $(ROOT)/cpu/$(CPU)/cache-v8.S                   \
        $(ROOT)/cpu/$(CPU)/mmu.c
endif

ifeq ($(OS),NOS)
	PRANA_SRC += \
	        $(ROOT)/stdlib/c/vsnprintf.c                    \
	        $(ROOT)/stdlib/c/vsprintf.c                     \
	        $(ROOT)/stdlib/c/snprintf.c                     \
	        $(ROOT)/stdlib/c/sprintf.c                      \
	        $(ROOT)/stdlib/c/printf.c                       \
	        $(ROOT)/stdlib/c/putchar.c                      \
	        $(ROOT)/stdlib/c/puts.c                         \
	        $(ROOT)/stdlib/c/sbrk.c                         \
	        $(ROOT)/stdlib/c/memchr.c                       \
	        $(ROOT)/stdlib/c/memset.c                       \
	        $(ROOT)/stdlib/c/backtrace.c                    \
	        $(ROOT)/stdlib/c/int_sqrt.c                     \
	        $(ROOT)/stdlib/c/__assert.c                     \
	        $(ROOT)/api/lzss/ms_decompress.c                \
	        $(ROOT)/api/lzss/zlib.c                         \
	        $(ROOT)/api/lzss/lzmadec.c                      \
	        $(ROOT)/api/lzss/7alloc.c                       \
	        $(ROOT)/exception_cb/exception_cb.c             \
	        $(ROOT)/timer_cb/timer_cb.c                     \
		    $(ROOT)/stdlib/c/$(MALLOC_FILE)                 \
		    $(ROOT)/stdlib/c/ttf_dlmalloc.c                 \
		    $(ROOT)/stdlib/c/hash_dlmalloc.c                \
else
	PRANA_SRC += \
        $(ROOT)/stdlib/c/backtrace.c                    \
        $(ROOT)/stdlib/c/__assert.c                     \
        $(ROOT)/api/lzss/ms_decompress.c                \
        $(ROOT)/api/lzss/zlib.c                         \
        $(ROOT)/api/lzss/lzmadec.c                      \
        $(ROOT)/api/lzss/7alloc.c
endif

SRC_S  = $(filter %.S, $(PRANA_SRC))
SRC_C  = $(filter %.c, $(PRANA_SRC))
SRC_O  = $(filter %.o,  $(PRANA_SRC))
SRC_B  = $(filter %.bin, $(PRANA_SRC))

PRANA_OBJ = ${SRC_S:%.S=$(OBJPATH)/%.o} ${SRC_C:%.c=$(OBJPATH)/%.o}

ifeq ($(CHIP),U3)
	PRANA_LIB = libprana_u3.a
else ifeq ($(CHIP),S7)
	PRANA_LIB = libprana_s7.a
else ifeq ($(CHIP),S7LD)
	PRANA_LIB = libprana_s7ld.a
else ifeq ($(CHIP),S7LA)
	PRANA_LIB = libprana_s7la.a
else ifeq ($(CHIP),S7J)
    ifeq ($(AEON_TYPE),aeon1)
    	PRANA_LIB = libprana_s7j_a.a
    else
    	PRANA_LIB = libprana_s7j_aeonR2.a
    endif
else ifeq ($(CHIP),S8)
    ifeq ($(ARCH),AEONR2)
        PRANA_LIB = libprana_s8_aeonR2.a
    else
        PRANA_LIB = libprana_s8.a
    endif
else ifeq ($(CHIP),A5)
    ifeq ($(ARCH),AEONR2)
        PRANA_LIB = libprana_a5_aeonR2.a
    else
        PRANA_LIB = libprana_a5.a
    endif
else ifeq ($(CHIP),A5P)
    ifeq ($(ARCH),AEONR2)
        PRANA_LIB = libprana_a5p_aeonR2.a
    else
        PRANA_LIB = libprana_a5p.a
    endif
else ifeq ($(CHIP),A3)
    ifeq ($(ARCH),AEONR2)
        PRANA_LIB = libprana_a3_aeonR2.a
    else
        PRANA_LIB = libprana_a3.a
    endif
else ifeq ($(CHIP),S7L)
	PRANA_LIB = libprana_s7l.a
else ifeq ($(CHIP),U4)
	PRANA_LIB = libprana_u4_a.a
else ifeq ($(CHIP),K1)
	PRANA_LIB = libprana_k1_a.a
else ifeq ($(CHIP),KAPPA)
	PRANA_LIB = libprana_kappa.a
else ifeq ($(CHIP),KENYA)
	PRANA_LIB = libprana_kenya.a
else ifeq ($(CHIP),KELTIC)
	PRANA_LIB = libprana_keltic.a
else ifeq ($(CHIP),K2)
	PRANA_LIB = libprana_k2_a.a
else ifeq ($(CHIP),KERES)
	PRANA_LIB = libprana_keres.a
else ifeq ($(CHIP),KRITI)
	PRANA_LIB = libprana_kriti.a
else ifeq ($(CHIP),KRATOS)
	PRANA_LIB = libprana_kratos.a
else ifeq ($(CHIP),KIWI)
	PRANA_LIB = libprana_kiwi.a
else ifeq ($(CHIP),KRIS)
	PRANA_LIB = libprana_kris.a
else ifeq ($(CHIP),K1P)
	PRANA_LIB = libprana_k1p.a
else ifeq ($(CHIP),K5TN)
	PRANA_LIB = libprana_k5tn.a
else ifeq ($(CHIP),K1C)
	PRANA_LIB = libprana_k1c.a
else ifeq ($(CHIP),K5AP)
	PRANA_LIB = libprana_k5ap.a
else ifeq ($(CHIP),MARIA10)
    ifeq ($(ARCH),AEONR2)
        PRANA_LIB = libprana_m10_aeonR2.a
    else
        PRANA_LIB = libprana_m10_aeon.a
    endif
else ifeq ($(CHIP),MACAW12)
    ifeq ($(ARCH),AEONR2)
        PRANA_LIB = libprana_m12_aeonR2.a
    else
        PRANA_LIB = libprana_m12_aeon.a
    endif
else ifeq ($(CHIP),EDEN)
    ifeq ($(ARCH),AEONR2)
        PRANA_LIB = libprana_eden_aeonR2.a
    else
        PRANA_LIB = libprana_eden_aeon.a
    endif
else ifeq ($(CHIP),NASA)
    ifeq ($(ARCH),AEONR2)
        PRANA_LIB = libprana_nasa_aeonR2.a
    else
        PRANA_LIB = libprana_nasa_aeon.a
    endif
else ifeq ($(CHIP),EULER)
    ifeq ($(ARCH),AEONR2)
        PRANA_LIB = libprana_euler_aeonR2.a
    else
        PRANA_LIB = libprana_euler_aeon.a
    endif
else ifeq ($(CHIP),MAYA)
    ifeq ($(ARCH),AEONR2)
        PRANA_LIB = libprana_maya_aeonR2.a
    else
        PRANA_LIB = libprana_maya_aeon.a
    endif
else ifeq ($(CHIP),WHISKY)
    ifeq ($(ARCH),AEONR2)
        PRANA_LIB = libprana_whisky_aeonR2.a
    else
        PRANA_LIB = libprana_whisky_aeon.a
    endif
else ifeq ($(CHIP),MELODY)
    ifeq ($(ARCH),AEONR2)
        PRANA_LIB = libprana_melody_aeonR2.a
    else
        PRANA_LIB = libprana_melody_aeon.a
    endif
else ifeq ($(CHIP),J2)
    PRANA_LIB = libprana_j2.a
else ifeq ($(CHIP),T11)
	PRANA_LIB = libprana_t11.a
else ifeq ($(CHIP),A1)
	PRANA_LIB = libprana_a1.a
else ifeq ($(CHIP),A6)
	PRANA_LIB = libprana_a6.a
else ifeq ($(CHIP),A7)
	PRANA_LIB = libprana_a7.a
else ifeq ($(CHIP),AMETHYST)
	PRANA_LIB = libprana_amethyst.a
else ifeq ($(CHIP),EAGLE)
    ifeq ($(ARCH),AEONR2)
        PRANA_LIB = libprana_eagle_r2.a
    else
        PRANA_LIB = libprana_eagle.a
    endif
else ifeq ($(CHIP),AGATE)
    ifeq ($(ARCH),MIPS)
    	PRANA_LIB = libprana_agate_mips.a
    else
    	PRANA_LIB = libprana_agate.a
    endif
else ifeq ($(CHIP),EINSTEIN)
    ifeq ($(ARCH),AEONR2)
    	PRANA_LIB = libprana_einstein_aeonR2.a
    else
    	PRANA_LIB = libprana_einstein.a
    endif
else ifeq ($(CHIP),NAPOLI)
    ifeq ($(ARCH),AEONR2)
    	PRANA_LIB = libprana_napoli_aeonR2.a
    else
    	PRANA_LIB = libprana_napoli.a
    endif
else ifeq ($(CHIP),EINSTEIN3)
    ifeq ($(ARCH),AEONR2)
    	PRANA_LIB = libprana_einstein3_r2.a
    else
    	PRANA_LIB = libprana_einstein3.a
    endif
else ifeq ($(CHIP),MUJI)
    ifeq ($(ARCH),AEONR2)
    	PRANA_LIB = libprana_muji_r2.a
    else
    	PRANA_LIB = libprana_muji.a
    endif
else ifeq ($(CHIP),MANHATTAN)
    ifeq ($(ARCH),AEONR2)
        ifeq ($(FRC), 1)
    	    PRANA_LIB = libprana_manhattan_frcr2.a
        else
    	    PRANA_LIB = libprana_manhattan_r2.a
    	endif
    else
    	PRANA_LIB = libprana_manhattan.a
    endif
else ifeq ($(CHIP),MASERATI)
    ifeq ($(ARCH),AEONR2)
        ifeq ($(FRC), 1)
    	    PRANA_LIB = libprana_maserati_frcr2.a
        else
    	    PRANA_LIB = libprana_maserati_r2.a
    	endif
    else
    	PRANA_LIB = libprana_maserati.a
    endif

else ifeq ($(CHIP),MYSTIC)
    ifeq ($(ARCH),AEONR2)
         ifeq ($(FRC), 1)
             PRANA_LIB = libprana_mystic_frcr2.a
         else
             PRANA_LIB = libprana_mystic_r2.a
         endif
     else
         PRANA_LIB = libprana_mystic.a
     endif

else ifeq ($(CHIP),MAXIM)
    ifeq ($(ARCH),AEONR2)
         ifeq ($(FRC), 1)
             PRANA_LIB = libprana_maxim_frcr2.a
         else
             PRANA_LIB = libprana_maxim_r2.a
         endif
     else
         PRANA_LIB = libprana_maxim.a
     endif

else ifeq ($(CHIP),MACAN)
    ifeq ($(ARCH),AEONR2)
    	PRANA_LIB = libprana_macan_r2.a
    else
    	PRANA_LIB = libprana_macan.a
    endif
else ifeq ($(CHIP),M3822)
    ifeq ($(ARCH),ARMv7)
        PRANA_LIB = libprana_M3822_arm32.a
    else ifeq ($(ARCH),AEONR2)
        CFG_TOOLCHAIN_VER = 4.4.3
        PRANA_LIB = libprana_M3822_r2.a
    else
        CFG_TOOLCHAIN_VER = 4.1.2
        PRANA_LIB = libprana_M3822.a
    endif
else ifeq ($(CHIP),EMERALD)
	PRANA_LIB = libprana_emerald.a
else ifeq ($(CHIP),KAISER)
    ifeq ($(ARCH),AEONR2)
        PRANA_LIB = libprana_kaiser_r2.a
    else
        PRANA_LIB = libprana_kaiser.a
    endif
else ifeq ($(CHIP),EDISON)
    ifeq ($(ARCH),AEONR2)
        PRANA_LIB = libprana_edison_aeonR2.a
    else
        PRANA_LIB = libprana_edison.a
    endif
else ifeq ($(CHIP),EIFFEL)
    ifeq ($(ARCH),AEONR2)
        PRANA_LIB = libprana_eiffel_r2.a
    else ifeq ($(ARCH),MIPS)
        PRANA_LIB = libprana_eiffel_mips.a
    else
        PRANA_LIB = libprana_eiffel.a
    endif
else ifeq ($(CHIP),NIKE)
    ifeq ($(ARCH),AEONR2)
        PRANA_LIB = libprana_nike_r2.a
    else ifeq ($(ARCH),MIPS)
        PRANA_LIB = libprana_nike_mips.a
    else
        PRANA_LIB = libprana_nike.a
    endif
else ifeq ($(CHIP),MADISON)
    ifeq ($(ARCH),AEONR2)
        PRANA_LIB = libprana_madison_r2.a
    else ifeq ($(ARCH),MIPS)
        PRANA_LIB = libprana_madison_mips.a
    else
        PRANA_LIB = libprana_madison.a
    endif
else ifeq ($(CHIP),MONET)
    ifeq ($(ARCH),AEONR2)
        PRANA_LIB = libprana_monet_r2.a
    else ifeq ($(ARCH),ARMv7)
        PRANA_LIB = libprana_monet_arm32.a
    else
        PRANA_LIB = libprana_monet.a
    endif

else ifeq ($(CHIP),MOONEY)
    ifeq ($(ARCH),AEONR2)
        PRANA_LIB = libprana_mooney_r2.a
    else ifeq ($(ARCH),ARMv7)
        PRANA_LIB = libprana_mooney_arm32.a
    else
        PRANA_LIB = libprana_mooney.a
    endif

else ifeq ($(CHIP),M7221)
    ifeq ($(ARCH),AEONR2)
        PRANA_LIB = libprana_M7221_r2.a
    else ifeq ($(ARCH),ARMv8)
        PRANA_LIB = libprana_M7221_arm64.a
    else
        PRANA_LIB = libprana_M7221.a
    endif

else ifeq ($(CHIP),MCLAREN)
    ifeq ($(ARCH),AEONR2)
        PRANA_LIB = libprana_mclaren_r2.a
    else ifeq ($(ARCH),ARMv7)
        PRANA_LIB = libprana_mclaren_arm32.a
    else
        PRANA_LIB = libprana_mclaren.a
    endif

else ifeq ($(CHIP),MESSI)
    ifeq ($(ARCH),AEONR2)
        PRANA_LIB = libprana_messi_r2.a
    else ifeq ($(ARCH),ARMv7)
        PRANA_LIB = libprana_messi_arm32.a
    else
        PRANA_LIB = libprana_messi.a
    endif
else ifeq ($(CHIP),CELTICS)
    ifeq ($(ARCH),AEONR2)
        PRANA_LIB = libprana_celtics_r2.a
    else ifeq ($(ARCH),MIPS)
        PRANA_LIB = libprana_celtics_mips.a
    else
        PRANA_LIB = libprana_celtics.a
    endif
else ifeq ($(CHIP),CLIPPERS)
    ifeq ($(ARCH),AEONR2)
        PRANA_LIB = libprana_clippers_r2.a
    else ifeq ($(ARCH),MIPS)
        PRANA_LIB = libprana_clippers_mips.a
    else
        PRANA_LIB = libprana_clippers.a
    endif
else ifeq ($(CHIP),CURRY)
     ifeq ($(ARCH),AEONR2)
         PRANA_LIB = libprana_curry_r2.a
     else ifeq ($(ARCH),MIPS)
         PRANA_LIB = libprana_curry_mips.a
     else
         PRANA_LIB = libprana_curry.a
    endif
else ifeq ($(CHIP),C2P)
     ifeq ($(ARCH),AEONR2)
         PRANA_LIB = libprana_c2p_r2.a
    else ifeq ($(ARCH),ARMv7)
         PRANA_LIB = libprana_c2p_arm32.a
     else
         PRANA_LIB = libprana_c2p.a
    endif
else ifeq ($(CHIP),C2S)
     ifeq ($(ARCH),AEONR2)
         PRANA_LIB = libprana_c2s_r2.a
    else ifeq ($(ARCH),ARMv7)
         PRANA_LIB = libprana_c2s_arm32.a
     else
         PRANA_LIB = libprana_c2s.a
    endif
else ifeq ($(CHIP),KANO)
    ifeq ($(ARCH),AEONR2)
        PRANA_LIB = libprana_kano_r2.a
    else ifeq ($(ARCH),MIPS)
        PRANA_LIB = libprana_kano_mips.a
    else
        PRANA_LIB = libprana_kano.a
    endif
else ifeq ($(CHIP),K6)
    ifeq ($(ARCH),AEONR2)
        PRANA_LIB = libprana_k6_r2.a
    else
        PRANA_LIB = libprana_k6.a
    endif
else ifeq ($(CHIP),K6LITE)
    ifeq ($(ARCH),AEONR2)
        PRANA_LIB = libprana_k6lite_r2.a
    else
        PRANA_LIB = libprana_k6lite.a
    endif
else ifeq ($(CHIP),K7U)
    ifeq ($(ARCH),AEONR2)
        PRANA_LIB = libprana_k7u_r2.a
    else
        PRANA_LIB = libprana_k7u.a
    endif
else ifeq ($(CHIP),MIAMI)
    ifeq ($(ARCH),AEONR2)
        PRANA_LIB = libprana_miami_r2.a
    else ifeq ($(ARCH),MIPS)
        PRANA_LIB = libprana_miami_mips.a
    else
        PRANA_LIB = libprana_miami.a
    endif
else ifeq ($(CHIP),NADAL)
    ifeq ($(ARCH),AEONR2)
        PRANA_LIB = libprana_nadal_r2.a
    else ifeq ($(ARCH),MIPS)
        PRANA_LIB = libprana_nadal_mips.a
    else
        PRANA_LIB = libprana_nadal.a
    endif
else ifeq ($(CHIP),NUGGET)
    ifeq ($(ARCH),AEONR2)
         PRANA_LIB = libprana_nugget_aeonR2.a
    else ifeq ($(ARCH),MIPS)
         PRANA_LIB = libprana_nugget_mips.a
    else
        PRANA_LIB = libprana_nugget.a
    endif
else ifeq ($(CHIP),MILAN)
    ifeq ($(ARCH),AEON)
         PRANA_LIB = libprana_milan_a.a
    else ifeq ($(ARCH),MIPS)
         ifeq ($(PM),1)
         PRANA_LIB = libprana_milan_pm.a
         else
         PRANA_LIB = libprana_milan.a
         endif
    else
        PRANA_LIB = libprana_milan_other.a
    endif
else ifeq ($(CHIP),MARLON)
    ifeq ($(ARCH),AEON)
         PRANA_LIB = libprana_marlon_a.a
    else ifeq ($(ARCH),MIPS)
         ifeq ($(PM),1)
         PRANA_LIB = libprana_marlon_pm.a
         else
         PRANA_LIB = libprana_marlon.a
         endif
    else
        PRANA_LIB = libprana_marlon_other.a
    endif
else ifeq ($(CHIP),NIKON)
	PRANA_LIB = libprana_nikon.a
else ifeq ($(CHIP),MONACO)
    ifeq ($(ARCH),AEONR2)
        PRANA_LIB = libprana_monaco_r2.a
    else ifeq ($(ARCH),MIPS)
        PRANA_LIB = libprana_monaco_mips.a
    else
        PRANA_LIB = libprana_monaco.a
    endif
else ifeq ($(CHIP),M5321)
    ifeq ($(ARCH),AEONR2)
        PRANA_LIB = libprana_M5321_r2.a
    else ifeq ($(ARCH),MIPS)
        PRANA_LIB = libprana_M5321_mips.a
    else
        PRANA_LIB = libprana_M5321_na.a
    endif
else ifeq ($(CHIP),MUNICH)
    ifeq ($(ARCH),AEONR2)
        PRANA_LIB = libprana_munich_r2.a
    else ifeq ($(ARCH),MIPS)
        PRANA_LIB = libprana_munich_mips.a
    else
        PRANA_LIB = libprana_munich.a
    endif
else ifeq ($(CHIP),MATISSE)
    ifeq ($(ARCH),AEONR2)
        PRANA_LIB = libprana_matisse_r2.a
    else
        PRANA_LIB = libprana_matisse.a
    endif
else ifeq ($(CHIP),MUSTANG)
    ifeq ($(ARCH),AEONR2)
        PRANA_LIB = libprana_mustang_r2.a
    else ifeq ($(ARCH),MIPS)
        PRANA_LIB = libprana_mustang_mips.a
    else
        PRANA_LIB = libprana_mustang.a
    endif

else ifeq ($(CHIP),MARCUS)
    ifeq ($(ARCH),AEONR2)
         ifeq ($(FRC), 1)
             PRANA_LIB = libprana_marcus_frcr2.a
         else
             PRANA_LIB = libprana_marcus_r2.a
         endif
     else
         PRANA_LIB = libprana_marcus.a
     endif

else ifeq ($(CHIP),MARVEL)
    ifeq ($(ARCH),AEONR2)
         ifeq ($(FRC), 1)
             PRANA_LIB = libprana_marvel_frcr2.a
         else
             PRANA_LIB = libprana_marvel_r2.a
         endif
     else
         PRANA_LIB = libprana_marvel.a
     endif

else ifeq ($(CHIP),M7622)
    ifeq ($(ARCH),AEONR2)
         ifeq ($(FRC), 1)
             PRANA_LIB = libprana_m7622_frcr2.a
         else
             PRANA_LIB = libprana_m7622_r2.a
         endif
     else
         PRANA_LIB = libprana_m7622.a
     endif

else ifeq ($(CHIP),M7322)
    ifeq ($(ARCH),AEONR2)
         PRANA_LIB = libprana_M7322_r2.a
     else ifeq ($(ARCH),ARMv8)
         PRANA_LIB = libprana_M7322_arm64.a
     else
         PRANA_LIB = libprana_M7322.a
     endif

else ifeq ($(CHIP),M7632)
    ifeq ($(ARCH),AEONR2)
         PRANA_LIB = libprana_M7632_r2.a
     else ifeq ($(ARCH),ARMv8)
         PRANA_LIB = libprana_M7632_arm64.a
     else
         PRANA_LIB = libprana_M7632.a
     endif

else ifeq ($(CHIP),M7332)
    ifeq ($(ARCH),AEONR2)
         PRANA_LIB = libprana_M7332_r2.a
     else ifeq ($(ARCH),ARMv8)
         PRANA_LIB = libprana_M7332_arm64.a
     else
         PRANA_LIB = libprana_M7332.a
     endif

else
    PRANA_LIB = libprana_unknown.a
endif

# Add "Header (include) file" directories here ...
INC_DIR = \
        -I$(ROOT)/include                               \
        -I$(ROOT)/api/include                           \
        -I$(ROOT)/cpu/include                           \
        -I$(ROOT)/cpu/$(CPU)

CC_TVOPTS = -DLIBPRANA

# When USE_DL_PREFIX is defined , malloc is replaced with dlmalloc in dlmalloc.c
#CC_TVOPTS = -DLIBPRANA -DUSE_DL_PREFIX

ifeq ($(PLATFORM),MBoot)
CC_TVOPTS += -DMBOOT
endif
ifeq ($(PLATFORM),CHAKRA)
CC_TVOPTS += -DCHAKRA
endif

YOGA_WARNING_FLAGS = -Werror -Wall -Wextra -Wcast-align -Wshadow -Wpointer-arith -Wstrict-prototypes -Winline -Wundef -Wno-format
YOGA_GLOBAL_CFLAGS = -pipe -fno-exceptions -ffunction-sections
#-fdata-sections
YOGA_GLOBAL_LDFLAGS = -msoft-float -g -nostdlib -Wl,-static

# ***********************************************************************
# Libraries
# ***********************************************************************

# Standard Libraries


# **********************************************
# Compiler and linker options
# **********************************************

INCLUDE   = $(INC_DIR)

ifeq ($(ARCH),AEONR2)
YOGA_GLOBAL_LDFLAGS = -march=$(AEON_TYPE) -msoft-float -g -nostdlib -Wl,--gc-sections -Wl,-static
CC_OPTS0  = -c $(INCLUDE) $(ARCH_FLAGS) $(CC_TVOPTS) $(YOGA_GLOBAL_CFLAGS)

ifeq ($(VERSION),Debug)
    CC_OPTS  += $(CC_OPTS0) -gdwarf-2 -D_Debug
else
    CC_OPTS  += $(CC_OPTS0) -O2
endif

LD_OPTS += -nostartfiles $(YOGA_GLOBAL_LDFLAGS) $(ARCH_FLAGS)
LDLIB += -lc -lgcc -lm

else ifeq ($(ARCH),AEON)
YOGA_GLOBAL_LDFLAGS = -march=$(AEON_TYPE) -msoft-float -g -nostdlib -Wl,--gc-sections -Wl,-static
CC_OPTS0  = -c $(INCLUDE) $(ARCH_FLAGS) $(CC_TVOPTS) $(YOGA_GLOBAL_CFLAGS)

ifeq ($(VERSION),Debug)
    CC_OPTS  += $(CC_OPTS0) -gdwarf-2 -D_Debug
else
    CC_OPTS  += $(CC_OPTS0) -O2
endif

LD_OPTS += -nostartfiles $(YOGA_GLOBAL_LDFLAGS) $(ARCH_FLAGS)
LDLIB += -lc -lgcc -lm

else ifeq ($(ARCH),MIPS)
ifeq ($(CHIP), K1)
CC_OPTS += -mips32r2 -EL -Wall -Wpointer-arith -Wstrict-prototypes -Winline -Wundef -fno-strict-aliasing -fno-optimize-sibling-calls -ffunction-sections -fdata-sections -fno-exceptions -c -G0
CC_OPTS += -D'NULL=0'
else ifeq ($(CHIP), K2)
CC_OPTS += -mips32r2 -EL -Wall -Wpointer-arith -Wstrict-prototypes -Winline -Wundef -fno-strict-aliasing -fno-optimize-sibling-calls -ffunction-sections -fdata-sections -fno-exceptions -c -G0
CC_OPTS += -D'NULL=0'
else ifeq ($(CHIP), KELTIC)
CC_OPTS += -mips32r2 -EL -Wall -Wpointer-arith -Wstrict-prototypes -Winline -Wundef -fno-strict-aliasing -fno-optimize-sibling-calls -ffunction-sections -fdata-sections -fno-exceptions -c -G0
CC_OPTS += -D'NULL=0'
else ifeq ($(CHIP), KAPPA)
CC_OPTS += -mips32r2 -EL -Wall -Wpointer-arith -Wstrict-prototypes -Winline -Wundef -fno-strict-aliasing -fno-optimize-sibling-calls -ffunction-sections -fdata-sections -fno-exceptions -c -G0
CC_OPTS += -D'NULL=0'
else ifeq ($(CHIP), KRITI)
CC_OPTS += -mips32r2 -EL -Wall -Wpointer-arith -Wstrict-prototypes -Winline -Wundef -fno-strict-aliasing -fno-optimize-sibling-calls -ffunction-sections -fdata-sections -fno-exceptions -c -G0
CC_OPTS += -D'NULL=0'
else ifeq ($(CHIP), KRATOS)
CC_OPTS += -mips32r2 -EL -Wall -Wpointer-arith -Wstrict-prototypes -Winline -Wundef -fno-strict-aliasing -fno-optimize-sibling-calls -ffunction-sections -fdata-sections -fno-exceptions -c -G0
CC_OPTS += -D'NULL=0'
else ifeq ($(CHIP), KIWI)
CC_OPTS += -mips32r2 -EL -Wall -Wpointer-arith -Wstrict-prototypes -Winline -Wundef -fno-strict-aliasing -fno-optimize-sibling-calls -ffunction-sections -fdata-sections -fno-exceptions -c -G0
CC_OPTS += -D'NULL=0'
else ifeq ($(CHIP), KRIS)
CC_OPTS += -mips32r2 -EL -Wall -Wpointer-arith -Wstrict-prototypes -Winline -Wundef -fno-strict-aliasing -fno-optimize-sibling-calls -ffunction-sections -fdata-sections -fno-exceptions -c -G0 -msoft-float
CC_OPTS += -D'NULL=0'
else ifeq ($(CHIP), K1P)
CC_OPTS += -mips32r2 -EL -Wall -Wpointer-arith -Wstrict-prototypes -Winline -Wundef -fno-strict-aliasing -fno-optimize-sibling-calls -ffunction-sections -fdata-sections -fno-exceptions -c -G0 -msoft-float
CC_OPTS += -D'NULL=0'
else ifeq ($(CHIP), K5TN)
CC_OPTS += -mips32r2 -EL -Wall -Wpointer-arith -Wstrict-prototypes -Winline -Wundef -fno-strict-aliasing -fno-optimize-sibling-calls -ffunction-sections -fdata-sections -fno-exceptions -c -G0
CC_OPTS += -D'NULL=0'
else ifeq ($(CHIP), K5AP)
CC_OPTS += -mips32r2 -EL -Wall -Wpointer-arith -Wstrict-prototypes -Winline -Wundef -fno-strict-aliasing -fno-optimize-sibling-calls -ffunction-sections -fdata-sections -fno-exceptions -c -G0 -msoft-float
CC_OPTS += -D'NULL=0'
else ifeq ($(CHIP), K1C)
CC_OPTS += -mips32r2 -EL -Wall -Wpointer-arith -Wstrict-prototypes -Winline -Wundef -fno-strict-aliasing -fno-optimize-sibling-calls -ffunction-sections -fdata-sections -fno-exceptions -c -G0 -msoft-float
CC_OPTS += -D'NULL=0'
else

CC_OPTS += -mips32r2 -EL -msoft-float -Wall -Wpointer-arith -Wstrict-prototypes -Winline -Wundef -fno-strict-aliasing -fno-optimize-sibling-calls -ffunction-sections -fdata-sections -fno-exceptions -c -G0

endif

else ifeq ($(ARCH),ARMv7)
ifeq ($(CHIP), MATISSE)
CC_OPTS +=  -march=armv7-a -mcpu=cortex-a9 -mfpu=vfpv3 -mfloat-abi=softfp
else ifeq ($(CHIP), M3822)
CC_OPTS +=  -march=armv7-a -mcpu=cortex-a9 -mfpu=vfpv3 -mfloat-abi=softfp
else
CC_OPTS +=  -march=armv7-a -mcpu=cortex-a9 -mfpu=neon -mfloat-abi=softfp
endif
CC_OPTS += -Werror -Wall -mno-unaligned-access -fomit-frame-pointer -fno-exceptions
CC_OPTS += -ffunction-sections -fdata-sections -mlittle-endian -fPIC
ifeq ($(PLATFORM),MBoot)
CC_OPTS += -fno-short-enums
endif

else ifeq ($(ARCH),ARMv8)
CC_OPTS +=  -march=armv8-a -mabi=lp64 -mtune=cortex-a53 -mstrict-align -mgeneral-regs-only
CC_OPTS += -Wall -fomit-frame-pointer -fno-exceptions -Wno-int-to-pointer-cast -Wno-unused-but-set-variable -Wno-pointer-to-int-cast
CC_OPTS += -ffunction-sections -fdata-sections -mlittle-endian -fPIC
ifeq ($(PLATFORM),MBoot)
CC_OPTS += -fno-short-enums
endif

endif

CC_OPTS    += $(INCLUDE) $(CFG_CC_OPTS) $(CC_APPOPTS) $(CC_TVOPTS)

ifeq ($(VERSION),Debug)
CC_OPTS    += -O0 -gdwarf-2
else
CC_OPTS    += -O2
endif

include config/CONFIG_$(CHIP).mk

# **********************************************
# Rules
# **********************************************
.PHONY : all clean pmsleep
.SUFFIXES: .bin .elf .dis .sym .siz

# Project Build

all: setup $(PRANA_LIB)

test:
	@echo $(CHIP)
	@echo $(CPU)
	@echo $(ARCH)
	@echo $(CROSSCOMPILE)

$(PRANA_LIB): $(PRANA_OBJ)
	@echo "[AR] $@"
	@$(AR) rcsv $@ $^

$(OBJ_B): $(OBJPATH)/%.o : %.bin
	@echo "[BIN] $@"
	@$(shell cd $(dir $<); $(OBJCOPY) -I binary -O elf32-tradlittlemips --prefix-sections=bin $(notdir $<) $(abspath $@))

$(OBJPATH)/%.o: %.S
	$(call make-depend-compile,$<,$@,$(subst .o,.d,$@))

$(OBJPATH)/%.o: %.c
	$(call make-depend-compile,$<,$@,$(subst .o,.d,$@))

$(OBJPATH)/%.o: %.bin
	@echo "[BIN] $@"
	@$(shell cd $(dir $<); $(OBJCOPY) -I binary -O elf32-tradlittlemips --prefix-sections=bin $(notdir $<) $(abspath $@))

.c.ln:  ;   lint -abhi $*.c
.elf.dis: ; @echo "[DIS] $@" ; $(OBJDUMP) -d -h -S $< > $@
.elf.sym: ; @echo "[SYM] $@" ; $(NM) -a -S $< > $@
.elf.siz: ; @echo "[SIZ] $@" ; $(SIZE) $< > $

LINT_INC=$(subst -I,,$(INC_DIR))
LINT_SRC_C=$(SRC_C)
LINT_DEF=$(subst -D,-d,$(filter -D%,$(CC_OPTS)))

lint:
	@(\
	echo chakra.lnt; \
	echo | $(CPP) -dM | \
	sed -e '/LONG_LONG/d' | \
	sed -e 's/#define \([^ ]*\) "\(..*\)"/-d"\1=(\2)"/' | \
	sed -e 's/#define \([^ ]*\) \(..*\)/-d"\1=\2"/' | \
	sed -e 's/#define /-d/'; \
	for i in $(LINT_DEF); do \
        echo $$i; \
	done; \
	for i in $(LINT_INC); do \
        echo -i\"../$$i\"; \
	done; \
	for i in $(shell echo | $(CPP) -x c -Wp,-v 2>&1 | grep '^ '); do \
        echo -i\"$$i\"; \
	done; \
	for i in $(LINT_SRC_C); do \
        echo ../$$i; \
	done; \
	) > LINT/$(CHIP).lnt
	(cd LINT; $(FLINT) -fff $(CHIP).lnt) | tee $(OBJPATH)/LINT.txt
	@echo "LINT: `grep Error $(OBJPATH)/LINT.txt | wc -l` Errors"

# Project Setup
setup:
	@mkdir -p $(OBJDIR) $(BINDIR)
	@mkdir -p $(PRANA_LIBPATH)

env:
	@echo CC_OPTS = $(CC_OPTS)
	@echo LD_OPTS = $(LD_OPTS)
	@echo SRC = $(SRC)
	@echo PRANA_LIB = $(PRANA_OBJ)

install: all
	@echo "[Jawa] Prana install"
	@mv $(PRANA_LIB) $(PRANA_LIBPATH)/$(PRANA_LIB)
	@chmod 644 $(PRANA_LIBPATH)/$(PRANA_LIB)

# Project API
DOCGEN :
#   doxygen.exe $(ROOT)/Project/Doxygen/Venus_3RD_PARTY_DDI_API.doxygen

# Project Clean
clean :
	@echo "[Jawa] Prana clean"
	rm -f ../lib/mstar/$(PRANA_LIB)
	rm -f $(OBJPATH)

realclean:
	rm -rf Bin* Obj*

# Project Dependence

# $(call make-depend-compile,source-file,object-file,depend-file)
define make-depend-compile
	@echo "[CC]  $1"
	@mkdir -p $(dir $2)
	@$(CC) -MM -MF $3 -MP -MT $2 $(CC_OPTS) $1
	@$(CC) $(CC_OPTS) -o $2 -c $1
endef

-include $(OBJ_S:.o=.d) $(OBJ_C:.o=.d)
